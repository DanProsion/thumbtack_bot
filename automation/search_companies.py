import time
import random
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from .utils import wait_for_element
# from sms_service import get_phone_number, get_sms_code
from state.FSM import RegisterState
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from loader import init_objects

class CompanySearchFlow:
    NEXT_BTN_CSS = (
        'section.flex.flex-column.flex-1.s_justify-start.pv3.ph3.s_ph5.overflow-y-auto '
        'button._1iRY-9hq7N_ErfzJ6CdfXn'
    )
    CARD_CSS = "[data-testid='pro-list-result']"
    NAME_CSS = ".IUE7kXgIsvED2G8vml4Wu, .Z4pkQxpLz9qpVDR7jJHjW"
    STOP_WORDS = {"highly", "rated", "frequently", "hired", "top", "pro", "recommended", "fastest", "response"}

    def __init__(self, driver):
        self.driver = driver

    def wait_for_element(self, by, selector, timeout=20):
        return WebDriverWait(self.driver, timeout).until(
            EC.presence_of_element_located((by, selector))
        )

    def _skip_three_forms(self, timeout: int = 6):
        try:
            WebDriverWait(self.driver, timeout).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, self.NEXT_BTN_CSS))
            )
            for _ in range(3):
                next_btn = self.driver.find_element(By.CSS_SELECTOR, self.NEXT_BTN_CSS)
                self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", next_btn)
                next_btn.click()
                WebDriverWait(self.driver, timeout).until_not(EC.staleness_of(next_btn))
        except TimeoutException:
            pass

    def _close_popups(self):
        for _ in range(10):
            try:
                skip_button = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, "//button//div[text()='Skip']"))
                )
                self.driver.execute_script("arguments[0].scrollIntoView(true);", skip_button)
                self.driver.execute_script("arguments[0].click();", skip_button)
                time.sleep(0.5)
            except TimeoutException:
                break
            except Exception:
                break

    def _extract_company_name(self, card):
        lbl = card.get_attribute("aria-label")
        if lbl and not any(w in lbl.lower() for w in self.STOP_WORDS):
            return lbl.strip()
        for el in card.find_elements(By.CSS_SELECTOR, self.NAME_CSS):
            txt = el.text.strip()
            if txt and not any(w in self.STOP_WORDS for w in txt.lower().split()):
                return txt
        return None

    async def start_company(self, human_typing, bot, user_id, zip_code, service_name, state):
        try:
            await bot.send_message(user_id, "[‚åõ] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π...")
            time.sleep(2)

            service_input = self.wait_for_element(By.CSS_SELECTOR, 'input[data-test="search-input"]')
            service_input.clear()
            human_typing(service_input, service_name)
            time.sleep(0.2)

            try:
                first_option = self.wait_for_element(By.CSS_SELECTOR, "ul > li:first-child", timeout=5)
                self.driver.execute_script("arguments[0].scrollIntoView(true);", first_option)
                first_option.click()
            except Exception:
                pass

            zip_input = self.wait_for_element(By.NAME, "zip_code")
            zip_input.clear()
            human_typing(zip_input, zip_code)
            time.sleep(0.2)

            search_button = WebDriverWait(self.driver, 20).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, 'button[data-test="search-button"]'))
            )
            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", search_button)
            time.sleep(1)
            try:
                search_button.click()
            except Exception:
                self.driver.execute_script("arguments[0].click();", search_button)

            self._skip_three_forms()
            await bot.send_message(user_id, "[üìç] –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º...")

            try:
                WebDriverWait(self.driver, 60).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, self.CARD_CSS))
                )
            except TimeoutException:
                await bot.send_message(user_id, "[‚ùå] –ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—Ç–∞–π–º–∞—É—Ç).")
                return

            time.sleep(2)
            self._close_popups()

            prev_cnt = 0
            while True:
                cards = self.driver.find_elements(By.CSS_SELECTOR, self.CARD_CSS)
                if len(cards) == prev_cnt:
                    break
                prev_cnt = len(cards)
                self.driver.execute_script("arguments[0].scrollIntoView({block:'end',behavior:'instant'});", cards[-1])
                try:
                    WebDriverWait(self.driver, 5).until(
                        lambda d: len(d.find_elements(By.CSS_SELECTOR, self.CARD_CSS)) > prev_cnt
                    )
                except TimeoutException:
                    break

            cards = self.driver.find_elements(By.CSS_SELECTOR, self.CARD_CSS)
            company_names = []
            for card in cards:
                name = self._extract_company_name(card)
                if name and name not in company_names:
                    company_names.append(name)

            if not company_names:
                await bot.send_message(user_id, "[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–π.")
                return

            companies_text = "\n".join(f"{i + 1}. {n}" for i, n in enumerate(company_names))
            await bot.send_message(
                user_id,
                f"[üè¢] –ù–∞–π–¥–µ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏:\n{companies_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞."
            )

            await state.update_data({
                "driver": self.driver,
                "company_names": company_names,
                "zip_code": zip_code,
                "service_name": service_name
            })
            await state.set_state(RegisterState.waiting_for_company_number)

        except Exception as e:
            await bot.send_message(user_id, f"[‚ùå] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π: {str(e)}")

    async def handle_company_selection(self, bot, user_id, message_text, state):
        try:
            data = await state.get_data()
            company_names = data.get("company_names")
            if not company_names:
                await bot.send_message(user_id, "[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π.")
                return

            index = int(message_text.strip()) - 1
            target_name = company_names[index]
            await bot.send_message(user_id, f"[üë£] –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–ø–∞–Ω–∏–∏: {target_name}")

            cards = self.driver.find_elements(By.CSS_SELECTOR, self.CARD_CSS)

            for card in cards:
                name = self._extract_company_name(card)
                if name == target_name:
                    try:
                        self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", card)
                        time.sleep(0.5)

                        outer_container = card.find_element(By.XPATH,
                            ".//ancestor::div[contains(@class, 'bg-white') and contains(@class, 'mb0') and contains(@class, 'shadow-200')]"
                        )
                        link = outer_container.find_element(By.TAG_NAME, "a")
                        href = link.get_attribute("href")

                        if not href:
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É")

                        self.driver.get(href)

                        await bot.send_message(user_id, f"[‚úÖ] –û—Ç–∫—Ä—ã–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ ¬´{target_name}¬ª")
                        await init_objects.project_creation_handler.start_project(bot, user_id)
                        return

                    except Exception as e:
                        await bot.send_message(user_id, f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
                        return

            await bot.send_message(user_id, "[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
        except Exception as e:
            await bot.send_message(user_id, f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏: {str(e)}")

    async def continue_registration_flow(self, bot, user_id: int):
        try:
            await bot.send_message(user_id, "[‚úÖ] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            await bot.send_message(user_id, f"[‚ùå] –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")






# NEXT_BTN_CSS = (
#     'section.flex.flex-column.flex-1.s_justify-start.pv3.ph3.s_ph5.overflow-y-auto '
#     'button._1iRY-9hq7N_ErfzJ6CdfXn'
# )
#
# def skip_three_forms(driver, timeout: int = 6):
#     """
#     –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ–æ—Ä–º–∞‚Äë¬´–≤–æ–ª—à–µ–±–Ω–∏–∫¬ª,
#     —Ç—Ä–∏–∂–¥—ã –∂–º—ë–º Next –∏ –∂–¥—ë–º, –ø–æ–∫–∞ —Å–µ–∫—Ü–∏—è –∏—Å—á–µ–∑–Ω–µ—Ç.
#     """
#     try:
#         # –°–µ–∫—Ü–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞; –∂–¥—ë–º –µ—ë 1‚Äë–π —Ä–∞–∑
#         WebDriverWait(driver, timeout).until(
#             EC.visibility_of_element_located((By.CSS_SELECTOR, NEXT_BTN_CSS))
#         )
#
#         for _ in range(3):
#             next_btn = driver.find_element(By.CSS_SELECTOR, NEXT_BTN_CSS)
#             driver.execute_script("arguments[0].scrollIntoView({block:'center'});", next_btn)
#             next_btn.click()
#             # –ñ–¥—ë–º –ª–∏–±–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏, –ª–∏–±–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π
#             WebDriverWait(driver, timeout).until_not(
#                 EC.staleness_of(next_btn)
#             )
#     except TimeoutException:
#         # –§–æ—Ä–º–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å ‚Äî –∑–Ω–∞—á–∏—Ç, –Ω–∞–º –∏ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–∞–∂–∏–º–∞—Ç—å
#         pass
#
# async def after_registration_flow(driver, human_typing, bot, user_id,
#                                   zip_code: str, service_name: str, state):
#     try:
#
#         await bot.send_message(user_id, "[‚åõ] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π...")
#         time.sleep(2)
#
#         # –í–≤–æ–¥ —Å–µ—Ä–≤–∏—Å–∞
#         service_input = wait_for_element(driver, By.CSS_SELECTOR, 'input[data-test="search-input"]')
#         service_input.clear()
#         human_typing(service_input, service_name)
#         time.sleep(0.2)
#
#         # –ö–ª–∏–∫ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
#         try:
#             first_option = wait_for_element(driver, By.CSS_SELECTOR, "ul > li:first-child", timeout=5)
#             driver.execute_script("arguments[0].scrollIntoView(true);", first_option)
#             first_option.click()
#         except Exception:
#             pass
#
#         time.sleep(0.2)
#
#         # –í–≤–æ–¥ zip-–∫–æ–¥–∞
#         zip_input = wait_for_element(driver, By.NAME, "zip_code")
#         zip_input.clear()
#         human_typing(zip_input, zip_code)
#         time.sleep(0.2)
#
#         # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
#         search_button = WebDriverWait(driver, 20).until(
#             EC.element_to_be_clickable((By.CSS_SELECTOR, 'button[data-test="search-button"]'))
#         )
#         driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", search_button)
#         time.sleep(1)
#         try:
#             search_button.click()
#         except Exception:
#             driver.execute_script("arguments[0].click();", search_button)
#
#         # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—ã
#         skip_three_forms(driver)
#
#         await bot.send_message(user_id, "[üìç] –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º...")
#
#         CARD_CSS = "[data-testid='pro-list-result']"
#         NAME_CSS = ".IUE7kXgIsvED2G8vml4Wu, .Z4pkQxpLz9qpVDR7jJHjW"
#         STOP_WORDS = {"highly", "rated", "frequently", "hired",
#                       "top", "pro", "recommended", "fastest", "response"}
#
#         # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
#         try:
#             WebDriverWait(driver, 60).until(
#                 EC.presence_of_element_located((By.CSS_SELECTOR, CARD_CSS))
#             )
#         except TimeoutException:
#             await bot.send_message(user_id, "[‚ùå] –ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—Ç–∞–π–º–∞—É—Ç).")
#             return
#
#         def close_popup_if_present(driver):
#             """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–æ 3 –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω, –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É 'Skip'."""
#             for _ in range(10):
#                 try:
#                     skip_button = WebDriverWait(driver, 5).until(
#                         EC.element_to_be_clickable((By.XPATH, "//button//div[text()='Skip']"))
#                     )
#                     driver.execute_script("arguments[0].scrollIntoView(true);", skip_button)
#                     driver.execute_script("arguments[0].click();", skip_button)
#                     time.sleep(0.5)
#                 except TimeoutException:
#                     break
#                 except Exception as e:
#                     print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞: {e}")
#                     break
#
#         time.sleep(2)
#         close_popup_if_present(driver)
#
#         prev_cnt = 0
#         while True:
#             cards = driver.find_elements(By.CSS_SELECTOR, CARD_CSS)
#             if len(cards) == prev_cnt:
#                 break
#             prev_cnt = len(cards)
#             driver.execute_script("arguments[0].scrollIntoView({block:'end',behavior:'instant'});", cards[-1])
#             try:
#                 WebDriverWait(driver, 5).until(
#                     lambda d: len(d.find_elements(By.CSS_SELECTOR, CARD_CSS)) > prev_cnt
#                 )
#             except TimeoutException:
#                 break
#
#         cards = driver.find_elements(By.CSS_SELECTOR, CARD_CSS)
#
#         def extract_company_name(card) -> str | None:
#             lbl = card.get_attribute("aria-label")
#             if lbl and not any(w in lbl.lower() for w in STOP_WORDS):
#                 return lbl.strip()
#             for el in card.find_elements(By.CSS_SELECTOR, NAME_CSS):
#                 txt = el.text.strip()
#                 if txt and not any(w in STOP_WORDS for w in txt.lower().split()):
#                     return txt
#             return None
#
#         company_names = []
#         for card in cards:
#             name = extract_company_name(card)
#             if name and name not in company_names:
#                 company_names.append(name)
#
#         if not company_names:
#             await bot.send_message(user_id, "[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–π.")
#             return
#
#         companies_text = "\n".join(f"{i + 1}. {n}" for i, n in enumerate(company_names))
#         await bot.send_message(
#             user_id,
#             f"[üè¢] –ù–∞–π–¥–µ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏:\n{companies_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞."
#         )
#
#         await state.update_data({
#             "driver": driver,
#             "company_names": company_names,
#             "zip_code": zip_code,
#             "service_name": service_name
#         })
#         await state.set_state(RegisterState.waiting_for_company_number)
#
#     except Exception as e:
#         await bot.send_message(user_id, f"[‚ùå] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π: {str(e)}")
#
# async def handle_company_selection(bot, user_id, message_text, state):
#     try:
#         data = await state.get_data()
#         company_names = data.get("company_names")
#         driver = data.get("driver")
#         if not company_names:
#             await bot.send_message(user_id, "[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π.")
#             return
#
#         index = int(message_text.strip()) - 1
#         target_name = company_names[index]
#         await bot.send_message(user_id, f"[üë£] –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–ø–∞–Ω–∏–∏: {target_name}")
#
#         CARD_CSS = "[data-testid='pro-list-result']"
#         NAME_CSS = ".IUE7kXgIsvED2G8vml4Wu, .Z4pkQxpLz9qpVDR7jJHjW"
#         OUTER_CONTAINER_CSS = "div.bg-white.mb0.m_mb2.bb.b-gray-300.bn.b-gray-300.shadow-200.br3"
#
#         cards = driver.find_elements(By.CSS_SELECTOR, CARD_CSS)
#
#         def extract_company_name(card) -> str | None:
#             lbl = card.get_attribute("aria-label")
#             if lbl:
#                 return lbl.strip()
#             for el in card.find_elements(By.CSS_SELECTOR, NAME_CSS):
#                 txt = el.text.strip()
#                 if txt:
#                     return txt
#             return None
#
#         for card in cards:
#             name = extract_company_name(card)
#             if name == target_name:
#                 try:
#                     driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", card)
#                     time.sleep(0.5)
#
#                     try:
#                         outer_container = card.find_element(By.XPATH,
#                                                             ".//ancestor::div[contains(@class, 'bg-white') and contains(@class, 'mb0') and contains(@class, 'shadow-200')]")
#
#                         link = outer_container.find_element(By.TAG_NAME, "a")
#                         href = link.get_attribute("href")
#
#                         if not href:
#                             raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É")
#
#                         # –í–º–µ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Ç–µ–∫—É—â–µ–π
#                         driver.get(href)
#
#                         await bot.send_message(user_id, f"[‚úÖ] –û—Ç–∫—Ä—ã–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ ¬´{target_name}¬ª")
#                         await handle_project_creation(bot, user_id, driver)
#                         return
#                     except Exception as e:
#                         await bot.send_message(user_id, f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
#                         return
#
#                 except Exception as e:
#                     await bot.send_message(user_id, f"[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É: {e}")
#                     return
#
#         await bot.send_message(user_id, "[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
#     except Exception as e:
#         await bot.send_message(user_id, f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏: {str(e)}")
#
#
# async def continue_registration_flow(bot, user_id: int):
#     try:
#         bot.send_message(user_id, "[‚úÖ] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
#     except Exception as e:
#         bot.send_message(user_id, f"[‚ùå] –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")