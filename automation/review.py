import asyncio
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import ElementClickInterceptedException, StaleElementReferenceException, TimeoutException
import re
import time
import random
from .sim import buy_usa_other_number, get_sms_code

class ProjectCreationHandler:
    def __init__(self, driver):
        self.driver = driver

    async def start_project(self, bot, user_id):
        try:
            container_selector = 'div.bg-white.flex.flex-column.h-100'
            await bot.send_message(user_id, "[üöÄ] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ–µ–∫—Ç–∞...")

            await self.click_button_by_possible_texts(["Check availability", "Request a quote"], bot, user_id)
            await self.wait_for_element('div._140H21lwAyAeUjSFeiJkgI')
            await asyncio.sleep(1)
            await self.scroll_down(bot, user_id)

            while True:
                await self.handle_next_skip(container_selector, bot, user_id)
                await self.handle_radio_buttons(container_selector)
                await self.handle_checkboxes(container_selector)
                if await self.handle_phone_step(container_selector, bot, user_id):
                    break
                await asyncio.sleep(1)

            await bot.send_message(user_id, "[‚úÖ] –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

        except Exception as e:
            await bot.send_message(user_id, f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

    async def scroll_down(self, bot, user_id):
        try:
            self.driver.execute_script("window.scrollBy(0, 300);")
            await asyncio.sleep(0.3)
        except Exception as e:
            await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ: {e}")

    async def click_button_by_possible_texts(self, possible_texts, bot, user_id):
        try:
            aside_xpath = "//aside[contains(@class, 'z-1') and contains(@class, '_2rBAXAM49yzLBGWgkhc3vi')]"
            aside = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.XPATH, aside_xpath))
            )

            for text in possible_texts:
                try:
                    button_xpath = f".//button[.//span[contains(text(), '{text}')]]"
                    buttons = aside.find_elements(By.XPATH, button_xpath)
                    for el in buttons:
                        if el.is_displayed():
                            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", el)
                            await asyncio.sleep(0.3)
                            try:
                                el.click()
                            except:
                                self.driver.execute_script("arguments[0].click();", el)
                            return True
                except Exception:
                    continue
            await bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏–∑: {possible_texts} –≤–Ω—É—Ç—Ä–∏ aside")
            return False
        except Exception as e:
            await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ aside –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ: {e}")
            return False

    async def click_buttons_by_text(self, texts, bot, user_id, retries=5, delay=3):
        if isinstance(texts, str):
            texts = [texts]

        try:
            for attempt in range(1, retries + 1):
                for text in texts:
                    xpath = f"//button[.//span[normalize-space(text())='{text}']]"
                    buttons = self.driver.find_elements(By.XPATH, xpath)

                    if not buttons:
                        print(f"[{attempt}] üîç –ö–Ω–æ–ø–∫–∞ '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                        continue

                    print(f"[{attempt}] üîç –ù–∞–π–¥–µ–Ω–æ {len(buttons)} –∫–Ω–æ–ø–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º '{text}'")
                    for idx, el in enumerate(buttons, start=1):
                        if not el.is_displayed():
                            print(f"[{attempt}] ‚è≠Ô∏è –ö–Ω–æ–ø–∫–∞ #{idx} —Å —Ç–µ–∫—Å—Ç–æ–º '{text}' –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
                            continue

                        print(f"[{attempt}] ‚ñ∂Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ #{idx} —Å —Ç–µ–∫—Å—Ç–æ–º '{text}'")
                        try:
                            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", el)
                            await asyncio.sleep(0.3)
                            try:
                                el.click()
                                print(f"[{attempt}] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–ª–∏–∫–Ω—É–ª–∏ (–æ–±—ã—á–Ω—ã–π click) –ø–æ –∫–Ω–æ–ø–∫–µ '{text}'")
                                return True
                            except Exception as click_e:
                                print(f"[{attempt}] ‚ö†Ô∏è –û–±—ã—á–Ω—ã–π click –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {click_e}")
                                self.driver.execute_script("arguments[0].click();", el)
                                print(f"[{attempt}] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–ª–∏–∫–Ω—É–ª–∏ (JS click) –ø–æ –∫–Ω–æ–ø–∫–µ '{text}'")
                                return True
                        except Exception as e_click:
                            print(f"[{attempt}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–Ω–æ–ø–∫–µ #{idx} —Å —Ç–µ–∫—Å—Ç–æ–º '{text}': {e_click}")
                            continue

                if attempt < retries:
                    print(f"[{attempt}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∏ –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏–∑ {texts}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}s...")
                    time.sleep(delay)

            await bot.send_message(
                user_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∏ –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ ({', '.join(texts)}) –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫"
            )
            return False

        except Exception as e:
            await bot.send_message(user_id, f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ/–∫–ª–∏–∫–µ –∫–Ω–æ–ø–æ–∫ {texts}: {e}")
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    async def click_random_option_from_container(self, container_selector, max_attempts=5):
        wait = WebDriverWait(self.driver, 60)

        for attempt in range(1, max_attempts + 1):
            try:
                wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, container_selector)))
                containers = self.driver.find_elements(By.CSS_SELECTOR, container_selector)
                if not containers:
                    print("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return

                valid_labels = []

                for container in containers:
                    try:
                        subblocks = container.find_elements(By.CSS_SELECTOR, 'div[class*="_2m08zU26ib4"]')
                        if not subblocks:
                            subblocks = container.find_elements(By.CSS_SELECTOR, 'div.bg-white.bb.b-gray-300')
                    except Exception:
                        continue

                    for block in subblocks:
                        try:
                            labels = block.find_elements(By.CSS_SELECTOR, 'label')
                            for label in labels:
                                text = label.text.strip()
                                if not text or 'Specific dates' in text:
                                    continue
                                if label.find_elements(By.CSS_SELECTOR, 'input[type="text"]'):
                                    continue

                                for input_type in ["checkbox", "radio"]:
                                    inputs = label.find_elements(By.CSS_SELECTOR, f'input[type="{input_type}"]')
                                    if inputs:
                                        valid_labels.append((label, inputs[0], input_type))
                                        break
                        except Exception:
                            continue

                if not valid_labels:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π –º–µ—Ç–∫–∏.")
                    return

                label, input_elem, input_type = random.choice(valid_labels)
                self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", label)
                await asyncio.sleep(0.3)

                try:
                    label.click()
                except ElementClickInterceptedException:
                    self.driver.execute_script("arguments[0].click();", label)
                await asyncio.sleep(0.3)

                try:
                    if input_type == "radio":
                        wait.until(lambda d: input_elem.is_selected() or input_elem.get_attribute("checked") == "true")
                    elif input_type == "checkbox":
                        wait.until(
                            lambda d: input_elem.is_selected() or input_elem.get_attribute("aria-checked") == "true")
                except TimeoutException:
                    pass

                selected = (
                    (input_type == "radio" and (input_elem.is_selected() or input_elem.get_attribute("checked") == "true"))
                    or
                    (input_type == "checkbox" and input_elem.get_attribute("aria-checked") == "true")
                )

                if selected:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ –ø–æ ¬´{label.text.strip()}¬ª –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}")
                    return
                else:
                    print(f"‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç ¬´{label.text.strip()}¬ª –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º‚Ä¶")

            except StaleElementReferenceException:
                print(f"‚ö†Ô∏è StaleElementReference –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}, –ø–æ–≤—Ç–æ—Ä—è–µ–º‚Ä¶")
            except TimeoutException:
                print(f"‚ö†Ô∏è Timeout –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")

            time.sleep(1)

        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫.")

    async def sim_phone_numbers(self, bot, user_id):
        # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è buy_usa_other_number –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–¥–µ-—Ç–æ
        order = await buy_usa_other_number(bot, user_id)
        if not order:
            return

        raw_phone = order.get('phone', '')
        phone_id = order.get('id', '')

        if not raw_phone:
            await bot.send_message(user_id, "‚ùå –ù–µ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç API.")
            return

        digits = re.sub(r'\D', '', raw_phone)
        if len(digits) == 11 and digits.startswith('1'):
            digits = digits[1:]
        if len(digits) != 10:
            await bot.send_message(user_id, f"‚ùå –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–µ 10 —Ü–∏—Ñ—Ä: {digits}")
            return

        try:
            wait = WebDriverWait(self.driver, 20)
            phone_input = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[type="tel"][data-test="request-flow-text-box"]')
            ))

            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", phone_input)
            time.sleep(0.3)
            phone_input.clear()
            phone_input.send_keys(digits)
            time.sleep(0.5)

            await bot.send_message(user_id, f"[üì±] –í–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {digits}")
            if not phone_id:
                await bot.send_message(user_id, f"[‚ùå] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                return
            return phone_id
        except Exception as e:
            await bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
            return

    async def enter_sms_code(self, bot, user_id, order_id, max_attempts=20, delay=5):
        # get_sms_code –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–¥–µ-—Ç–æ
        code = get_sms_code(order_id, max_attempts=max_attempts, delay=delay)
        if not code:
            await bot.send_message(user_id, f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SMS-–∫–æ–¥ –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫.")
            return False

        digits = re.sub(r'\D', '', code)
        if not digits:
            await bot.send_message(user_id, f"‚ùå –í SMS –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ü–∏—Ñ—Ä: {code}")
            return False

        try:
            wait = WebDriverWait(self.driver, 30)
            sms_input = wait.until(
                EC.presence_of_element_located(
                    (By.CSS_SELECTOR, 'input[data-test="request-flow-text-box"][placeholder="4-digit code"]'))
            )

            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", sms_input)
            await asyncio.sleep(0.3)
            sms_input.clear()
            sms_input.send_keys(digits)
            await asyncio.sleep(0.5)

            await bot.send_message(user_id, f"[üî¢] –í–≤–µ–¥—ë–Ω SMS-–∫–æ–¥: {digits}")
            return True

        except Exception as e:
            await bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ SMS-–∫–æ–¥: {e}")
            return False

    async def select_random_checkbox(self):
        labels = self.driver.find_elements(By.CSS_SELECTOR, 'label._1T_KGYTSCiM4smv35ppVFb')
        if not labels:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞.")
            return False

        labels = labels[:]  # –∫–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è

        while labels:
            label = random.choice(labels)
            labels.remove(label)

            # –ù–∞–π–¥—ë–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π input[type="checkbox"] –≤–Ω—É—Ç—Ä–∏ label
            try:
                checkbox = label.find_element(By.CSS_SELECTOR, 'input[type="checkbox"]')
            except Exception:
                checkbox = None

            # 5 –ø–æ–ø—ã—Ç–æ–∫ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –æ–¥–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            for attempt in range(5):
                try:
                    # –°–∫—Ä–æ–ª–ª–∏–º –∫ label
                    self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", label)
                    time.sleep(0.2)  # –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥—Å—Ç—Ä–æ–∏–ª–∞—Å—å

                    # –ü–æ–ø—ã—Ç–∫–∞ 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π click() –ø–æ label
                    label.click()
                    return True
                except Exception as e1:
                    try:
                        # –ü–æ–ø—ã—Ç–∫–∞ 2: JS –∫–ª–∏–∫ –ø–æ label
                        self.driver.execute_script("arguments[0].click();", label)
                        return True
                    except Exception as e2:
                        if checkbox:
                            try:
                                # –ü–æ–ø—ã—Ç–∫–∞ 3: JS –∫–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
                                self.driver.execute_script("arguments[0].click();", checkbox)
                                return True
                            except Exception as e3:
                                pass
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–¥–æ–∂–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–ø—ã—Ç–∫—É
                time.sleep(0.3)

        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É —á–µ–∫–±–æ–∫—Å—É.")
        return False

    def element_exists_within_container(self, container_selector: str, element_selector: str) -> bool:
        try:
            container = self.driver.find_element(By.CSS_SELECTOR, container_selector)
            elements = container.find_elements(By.CSS_SELECTOR, element_selector)
            return any(e.is_displayed() for e in elements)
        except Exception:
            return False

    async def wait_for_element(self, selector, timeout=10):
        wait = WebDriverWait(self.driver, timeout)
        try:
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
        except TimeoutException:
            pass

    async def handle_next_skip(self, container_selector, bot, user_id):
        if any(self.text_exists_within_container(container_selector, t) for t in ["Next", "Skip"]):
            print("–ó–∞—Ü–∏–∫–ª–∏–ª–∏—Å—å –Ω–∞ 1")
            await self.click_buttons_by_text(["Next", "Skip"], bot, user_id)
            return True
        return False

    async def handle_radio_buttons(self, container_selector):
        if self.element_exists_within_container(container_selector, 'div.XL2ul0WqP7EQIqn1U5rlZ'):
            if self.element_exists_within_container(container_selector, 'div._2m08zU26ib4_Kp9OU_PA07'):
                print("–ó–∞—Ü–∏–∫–ª–∏–ª–∏—Å—å –Ω–∞ 2 (—Å–µ–ª–µ–∫—Ç–æ—Ä—ã)")
                await self.click_random_option_from_container('div.XL2ul0WqP7EQIqn1U5rlZ')
                return True
        return False

    async def handle_checkboxes(self, container_selector):
        if self.element_exists_within_container(container_selector, 'label._1T_KGYTSCiM4smv35ppVFb'):
            print("–ó–∞—Ü–∏–∫–ª–∏–ª–∏—Å—å –Ω–∞ 3 (—á–µ–∫–±–æ–∫—Å—ã)")
            await self.select_random_checkbox()
            return True
        return False

    def text_exists_within_container(self, container_selector: str, text: str) -> bool:
        try:
            container = self.driver.find_element(By.CSS_SELECTOR, container_selector)
            elements = container.find_elements(By.XPATH, f".//*[contains(text(), '{text}')]")
            return any(e.is_displayed() for e in elements)
        except Exception:
            return False

    async def handle_phone_step(self, container_selector, bot, user_id):
        while True:
            # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —è–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞
            if not self.text_exists_within_container(container_selector, "Review the zip and add your contact info"):
                return False
            if not self.text_exists_within_container(container_selector, "Submit"):
                return False
            if not self.text_exists_within_container(container_selector, "Double-check your zip!"):
                return False
            if not self.element_exists_within_container(container_selector, "div._3sVWix2Rl9SVKK2_CV-T0r"):
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
            phone_label_present = self.text_exists_within_container(container_selector, "Phone number")
            phone_input_present = self.is_phone_input_present()

            if phone_label_present and phone_input_present:
                print("–ó–∞—Ü–∏–∫–ª–∏–ª–∏—Å—å –Ω–∞ 4 (—ç—Ç–∞–ø —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º)")
                phone_id = await self.sim_phone_numbers(bot, user_id)

                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç—å "Submit" –∏–ª–∏ "Next"
                click = await self.click_buttons_by_text(["Submit", "Next"], bot, user_id)
                if not click:
                    continue

                # –í–≤–æ–¥ –∫–æ–¥–∞
                await self.enter_sms_code(phone_id, bot, user_id)

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
                click = await self.click_buttons_by_text(["Verify"], bot, user_id)
                if not click:
                    continue

                return True
            return False

    def is_phone_input_present(self) -> bool:
        return len(self.driver.find_elements(By.CSS_SELECTOR, 'input[type="tel"][autocomplete="tel"]')) > 0

